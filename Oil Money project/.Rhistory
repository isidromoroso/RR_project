cat("Mejor alpha (l1_ratio):", best_alpha, "\n")
cat("Mejor lambda:", best_lambda, "\n")
cat("Intercepto:", intercept, "\n")
cat("Coeficientes:", round(coefs, 5), "\n")
# Calcular valores ajustados
df$sk_fit <- df$usd * coefs[1] +
df$gbp * coefs[2] +
df$eur * coefs[3] +
df$brent * coefs[4] +
intercept
# Calcular residuales
df$sk_residual <- df$nok - df$sk_fit
# Cargar librerías necesarias
library(dplyr)
# Establecer umbrales basados en 1 sigma del residual anterior a la fecha corte
residual_std <- sd(df$sk_residual[df$date < as.Date('2017-04-25')])
upper <- residual_std
lower <- -residual_std
# Crear el dataframe de señales a partir del 25 de abril de 2017
signals <- df %>%
filter(date >= as.Date('2017-04-25')) %>%
select(nok, usd, eur, gbp, brent, sk_fit, sk_residual)
# Renombrar la columna sk_fit a fitted
signals <- signals %>%
rename(fitted = sk_fit)
# Agregar columnas de bandas y señales
signals <- signals %>%
mutate(
upper = fitted + upper,
lower = fitted + lower,
`stop profit` = fitted + 2 * upper,
`stop loss` = fitted + 2 * lower,
signals = 0
)
# Oil Money NOK Strategy - R Translation
# Load required libraries
library(tidyverse)
library(lubridate)
library(glmnet)
# Load and prepare data
df <- read.csv("data/brent crude nokjpy.csv", check.names = FALSE)
colnames(df)[1] <- "date"
df$date <- as.Date(df$date, format = "%m/%d/%Y")
# Scatter plot NOK vs Brent
df %>%
filter(date < as.Date("2017-04-25")) %>%
ggplot(aes(x = brent, y = nok)) +
geom_point(color = "#5f0f4e", size = 0.8) +
labs(title = "NOK Brent Correlation", x = "Brent in JPY", y = "NOKJPY") +
theme_minimal()
# Dual-axis base plot function (mimics Python twin axes)
dual_base_plot <- function(data, y1_col, y2_col, y1_label, y2_label, title,
col1 = "#34262b", col2 = "#cb2800") {
# Set margins to allow right axis label
par(mar = c(5, 4, 4, 4) + 0.1)
# Plot first series
plot(data$date, data[[y1_col]], type = "l", col = col1,
xlab = "Date", ylab = y1_label, main = title)
# Overlay second series with no axes
par(new = TRUE)
plot(data$date, data[[y2_col]], type = "s", col = col2,
axes = FALSE, xlab = "", ylab = "")
axis(side = 4, col = col2, col.axis = col2)
mtext(y2_label, side = 4, line = 3, col = col2)
legend("bottomright", legend = c(y1_label, y2_label),
col = c(col1, col2), lty = 1, bty = "n")
}
# Use dual_base_plot for relationships
# NOK vs Interest Rate
dual_base_plot(
df %>% filter(date < as.Date("2017-04-25")),
y1_col = "nok", y2_col = "interest rate",
y1_label = "NOKJPY", y2_label = "Interest Rate",
title = "NOK vs Interest Rate"
)
# NOK vs Brent
dual_base_plot(
df %>% filter(date < as.Date("2017-04-25")),
y1_col = "nok", y2_col = "brent",
y1_label = "NOKJPY", y2_label = "Brent in JPY",
title = "NOK vs Brent"
)
# NOK vs GDP (quarterly) - smooth interpolation of GDP values
# Interpolate GDP to daily frequency
gdp_idx    <- which(!is.na(df$`gdp yoy`))
gdp_dates  <- df$date[gdp_idx]
gdp_values <- df$`gdp yoy`[gdp_idx]
# Create interpolation function
gdp_interp_fun <- approxfun(x = as.numeric(gdp_dates), y = gdp_values, method = "linear", rule = 2)
# Apply to all dates
df$gdp_smooth <- gdp_interp_fun(as.numeric(df$date))
# Prepare combined dataframe for plotting
gdp_plot_df <- df %>% filter(date < as.Date("2017-04-25")) %>% select(date, nok, gdp_smooth)
# Plot using dual_base_plot (base R)
dual_base_plot(
gdp_plot_df,
y1_col = "nok", y2_col = "gdp_smooth",
y1_label = "NOKJPY", y2_label = "GDP YoY %",
title = "NOK vs GDP (Interpolated)"
)
# Linear regression (OLS)) (OLS)
x0 <- df %>% select(usd, gbp, eur, brent)
y  <- df$nok
train_idx <- df$date < as.Date("2017-04-25")
ols_model <- lm(y[train_idx] ~ ., data = x0[train_idx, ])
print(summary(ols_model))
library(glmnet)
# Convertimos x0 y filtramos por fecha
fecha_corte <- as.Date('2017-04-25')
x0_filtrado <- as.matrix(subset(x0, index(x0) < fecha_corte))
y_filtrado <- y[index(x0) < fecha_corte]
# Definimos los mismos parámetros que en Python
l1_ratios <- c(0.01, 0.1, 0.5, 0.9, 0.99)  # alpha in glmnet
lambdas <- c(0.0001, 0.0005, 0.001, 0.01, 0.1, 1, 10)
# Buscar la mejor combinación de l1_ratio y lambda
best_model <- NULL
best_mse <- Inf
best_alpha <- NA
best_lambda <- NA
for (l1 in l1_ratios) {
set.seed(123)  # Reproducibilidad
fit <- cv.glmnet(x0_filtrado, y_filtrado,
alpha = l1,
lambda = lambdas,
standardize = TRUE,
intercept = TRUE,
nfolds = 5,
maxit = 5000)
if (min(fit$cvm) < best_mse) {
best_mse <- min(fit$cvm)
best_model <- fit
best_alpha <- l1
best_lambda <- fit$lambda.min
}
}
# Extraer coeficientes del mejor modelo
coef_best <- coef(best_model, s = "lambda.min")
intercept <- coef_best[1]
coefs <- as.vector(coef_best[-1])
cat("Mejor alpha (l1_ratio):", best_alpha, "\n")
cat("Mejor lambda:", best_lambda, "\n")
cat("Intercepto:", intercept, "\n")
cat("Coeficientes:", round(coefs, 5), "\n")
# Calcular valores ajustados
df$sk_fit <- df$usd * coefs[1] +
df$gbp * coefs[2] +
df$eur * coefs[3] +
df$brent * coefs[4] +
intercept
# Calcular residuales
df$sk_residual <- df$nok - df$sk_fit
# Cargar librerías necesarias
library(dplyr)
# Establecer umbrales basados en 1 sigma del residual anterior a la fecha corte
residual_std <- sd(df$sk_residual[df$date < as.Date('2017-04-25')])
upper <- residual_std
lower <- -residual_std
# Crear el dataframe de señales a partir del 25 de abril de 2017
signals <- df %>%
filter(date >= as.Date('2017-04-25')) %>%
select(nok, usd, eur, gbp, brent, sk_fit, sk_residual)
# Renombrar la columna sk_fit a fitted
signals <- signals %>%
rename(fitted = sk_fit)
# Agregar columnas de bandas y señales
signals <- signals %>%
mutate(
upper = fitted + upper,
lower = fitted + lower,
`stop profit` = fitted + 2 * upper,
`stop loss` = fitted + 2 * lower,
signals = 0
)
# Aseguramos que 'signals' tenga una columna de señales
signals$signals <- 0
signals$cumsum <- 0  # para rastrear la acumulación de señales
# Ejecutamos el recorrido fila por fila
for (j in 1:nrow(signals)) {
# Aplicamos las reglas de entrada
if (signals$nok[j] > signals$upper[j]) {
signals$signals[j] <- -1  # Señal de venta (short)
}
if (signals$nok[j] < signals$lower[j]) {
signals$signals[j] <- 1   # Señal de compra (long)
}
# Recalculamos cumsum para controlar cantidad de señales activas
signals$cumsum <- cumsum(signals$signals)
# Si el número acumulado de señales supera +/-1, neutralizamos la nueva señal
if (signals$cumsum[j] > 1 || signals$cumsum[j] < -1) {
signals$signals[j] <- 0
signals$cumsum <- cumsum(signals$signals)
}
# STOP PROFIT: si se alcanza el límite superior de ganancia
if (signals$nok[j] > signals$`stop profit`[j]) {
signals$cumsum <- cumsum(signals$signals)
signals$signals[j] <- -signals$cumsum[j] + 1
signals$cumsum <- cumsum(signals$signals)
break  # detenemos el algoritmo
}
# STOP LOSS: si se alcanza el límite inferior de pérdida
if (signals$nok[j] < signals$`stop loss`[j]) {
signals$cumsum <- cumsum(signals$signals)
signals$signals[j] <- -signals$cumsum[j] - 1
signals$cumsum <- cumsum(signals$signals)
break  # detenemos el algoritmo
}
}
install.packages(c("ggplot2", "dplyr"))
# Oil Money NOK Strategy - R Translation
# Load required libraries
library(tidyverse)
library(lubridate)
library(glmnet)
# Load and prepare data
df <- read.csv("data/brent crude nokjpy.csv", check.names = FALSE)
colnames(df)[1] <- "date"
df$date <- as.Date(df$date, format = "%m/%d/%Y")
# Scatter plot NOK vs Brent
df %>%
filter(date < as.Date("2017-04-25")) %>%
ggplot(aes(x = brent, y = nok)) +
geom_point(color = "#5f0f4e", size = 0.8) +
labs(title = "NOK Brent Correlation", x = "Brent in JPY", y = "NOKJPY") +
theme_minimal()
# Dual-axis base plot function (mimics Python twin axes)
dual_base_plot <- function(data, y1_col, y2_col, y1_label, y2_label, title,
col1 = "#34262b", col2 = "#cb2800") {
# Set margins to allow right axis label
par(mar = c(5, 4, 4, 4) + 0.1)
# Plot first series
plot(data$date, data[[y1_col]], type = "l", col = col1,
xlab = "Date", ylab = y1_label, main = title)
# Overlay second series with no axes
par(new = TRUE)
plot(data$date, data[[y2_col]], type = "s", col = col2,
axes = FALSE, xlab = "", ylab = "")
axis(side = 4, col = col2, col.axis = col2)
mtext(y2_label, side = 4, line = 3, col = col2)
legend("bottomright", legend = c(y1_label, y2_label),
col = c(col1, col2), lty = 1, bty = "n")
}
# Use dual_base_plot for relationships
# NOK vs Interest Rate
dual_base_plot(
df %>% filter(date < as.Date("2017-04-25")),
y1_col = "nok", y2_col = "interest rate",
y1_label = "NOKJPY", y2_label = "Interest Rate",
title = "NOK vs Interest Rate"
)
# NOK vs Brent
dual_base_plot(
df %>% filter(date < as.Date("2017-04-25")),
y1_col = "nok", y2_col = "brent",
y1_label = "NOKJPY", y2_label = "Brent in JPY",
title = "NOK vs Brent"
)
# NOK vs GDP (quarterly) - smooth interpolation of GDP values
# Interpolate GDP to daily frequency
gdp_idx    <- which(!is.na(df$`gdp yoy`))
gdp_dates  <- df$date[gdp_idx]
gdp_values <- df$`gdp yoy`[gdp_idx]
# Create interpolation function
gdp_interp_fun <- approxfun(x = as.numeric(gdp_dates), y = gdp_values, method = "linear", rule = 2)
# Apply to all dates
df$gdp_smooth <- gdp_interp_fun(as.numeric(df$date))
# Prepare combined dataframe for plotting
gdp_plot_df <- df %>% filter(date < as.Date("2017-04-25")) %>% select(date, nok, gdp_smooth)
# Plot using dual_base_plot (base R)
dual_base_plot(
gdp_plot_df,
y1_col = "nok", y2_col = "gdp_smooth",
y1_label = "NOKJPY", y2_label = "GDP YoY %",
title = "NOK vs GDP (Interpolated)"
)
# Linear regression (OLS)) (OLS)
x0 <- df %>% select(usd, gbp, eur, brent)
y  <- df$nok
train_idx <- df$date < as.Date("2017-04-25")
ols_model <- lm(y[train_idx] ~ ., data = x0[train_idx, ])
print(summary(ols_model))
library(glmnet)
# Convertimos x0 y filtramos por fecha
fecha_corte <- as.Date('2017-04-25')
x0_filtrado <- as.matrix(subset(x0, index(x0) < fecha_corte))
# Oil Money NOK Strategy - R Translation
# Load required libraries
library(tidyverse)
library(lubridate)
library(glmnet)
# Load and prepare data
df <- read.csv("data/brent crude nokjpy.csv", check.names = FALSE)
colnames(df)[1] <- "date"
df$date <- as.Date(df$date, format = "%m/%d/%Y")
# Scatter plot NOK vs Brent
df %>%
filter(date < as.Date("2017-04-25")) %>%
ggplot(aes(x = brent, y = nok)) +
geom_point(color = "#5f0f4e", size = 0.8) +
labs(title = "NOK Brent Correlation", x = "Brent in JPY", y = "NOKJPY") +
theme_minimal()
# Dual-axis base plot function (mimics Python twin axes)
dual_base_plot <- function(data, y1_col, y2_col, y1_label, y2_label, title,
col1 = "#34262b", col2 = "#cb2800") {
# Set margins to allow right axis label
par(mar = c(5, 4, 4, 4) + 0.1)
# Plot first series
plot(data$date, data[[y1_col]], type = "l", col = col1,
xlab = "Date", ylab = y1_label, main = title)
# Overlay second series with no axes
par(new = TRUE)
plot(data$date, data[[y2_col]], type = "s", col = col2,
axes = FALSE, xlab = "", ylab = "")
axis(side = 4, col = col2, col.axis = col2)
mtext(y2_label, side = 4, line = 3, col = col2)
legend("bottomright", legend = c(y1_label, y2_label),
col = c(col1, col2), lty = 1, bty = "n")
}
# Use dual_base_plot for relationships
# NOK vs Interest Rate
dual_base_plot(
df %>% filter(date < as.Date("2017-04-25")),
y1_col = "nok", y2_col = "interest rate",
y1_label = "NOKJPY", y2_label = "Interest Rate",
title = "NOK vs Interest Rate"
)
# NOK vs Brent
dual_base_plot(
df %>% filter(date < as.Date("2017-04-25")),
y1_col = "nok", y2_col = "brent",
y1_label = "NOKJPY", y2_label = "Brent in JPY",
title = "NOK vs Brent"
)
# NOK vs GDP (quarterly) - smooth interpolation of GDP values
# Interpolate GDP to daily frequency
gdp_idx    <- which(!is.na(df$`gdp yoy`))
gdp_dates  <- df$date[gdp_idx]
gdp_values <- df$`gdp yoy`[gdp_idx]
# Create interpolation function
gdp_interp_fun <- approxfun(x = as.numeric(gdp_dates), y = gdp_values, method = "linear", rule = 2)
# Apply to all dates
df$gdp_smooth <- gdp_interp_fun(as.numeric(df$date))
# Prepare combined dataframe for plotting
gdp_plot_df <- df %>% filter(date < as.Date("2017-04-25")) %>% select(date, nok, gdp_smooth)
# Plot using dual_base_plot (base R)
dual_base_plot(
gdp_plot_df,
y1_col = "nok", y2_col = "gdp_smooth",
y1_label = "NOKJPY", y2_label = "GDP YoY %",
title = "NOK vs GDP (Interpolated)"
)
# Linear regression (OLS)) (OLS)
x0 <- df %>% select(usd, gbp, eur, brent)
y  <- df$nok
train_idx <- df$date < as.Date("2017-04-25")
ols_model <- lm(y[train_idx] ~ ., data = x0[train_idx, ])
print(summary(ols_model))
library(glmnet)
# Convertimos x0 y filtramos por fecha
fecha_corte <- as.Date('2017-04-25')
x0_filtrado <- as.matrix(subset(x0, index(x0) < fecha_corte))
# Oil Money NOK Strategy - R Translation
# Load required libraries
library(tidyverse)
library(lubridate)
library(glmnet)
# Load and prepare data
df <- read.csv("data/brent crude nokjpy.csv", check.names = FALSE)
colnames(df)[1] <- "date"
df$date <- as.Date(df$date, format = "%m/%d/%Y")
# Scatter plot NOK vs Brent
df %>%
filter(date < as.Date("2017-04-25")) %>%
ggplot(aes(x = brent, y = nok)) +
geom_point(color = "#5f0f4e", size = 0.8) +
labs(title = "NOK Brent Correlation", x = "Brent in JPY", y = "NOKJPY") +
theme_minimal()
# Dual-axis base plot function (mimics Python twin axes)
dual_base_plot <- function(data, y1_col, y2_col, y1_label, y2_label, title,
col1 = "#34262b", col2 = "#cb2800") {
# Set margins to allow right axis label
par(mar = c(5, 4, 4, 4) + 0.1)
# Plot first series
plot(data$date, data[[y1_col]], type = "l", col = col1,
xlab = "Date", ylab = y1_label, main = title)
# Overlay second series with no axes
par(new = TRUE)
plot(data$date, data[[y2_col]], type = "s", col = col2,
axes = FALSE, xlab = "", ylab = "")
axis(side = 4, col = col2, col.axis = col2)
mtext(y2_label, side = 4, line = 3, col = col2)
legend("bottomright", legend = c(y1_label, y2_label),
col = c(col1, col2), lty = 1, bty = "n")
}
# Use dual_base_plot for relationships
# NOK vs Interest Rate
dual_base_plot(
df %>% filter(date < as.Date("2017-04-25")),
y1_col = "nok", y2_col = "interest rate",
y1_label = "NOKJPY", y2_label = "Interest Rate",
title = "NOK vs Interest Rate"
)
# NOK vs Brent
dual_base_plot(
df %>% filter(date < as.Date("2017-04-25")),
y1_col = "nok", y2_col = "brent",
y1_label = "NOKJPY", y2_label = "Brent in JPY",
title = "NOK vs Brent"
)
# NOK vs GDP (quarterly) - smooth interpolation of GDP values
# Interpolate GDP to daily frequency
gdp_idx    <- which(!is.na(df$`gdp yoy`))
gdp_dates  <- df$date[gdp_idx]
gdp_values <- df$`gdp yoy`[gdp_idx]
# Create interpolation function
gdp_interp_fun <- approxfun(x = as.numeric(gdp_dates), y = gdp_values, method = "linear", rule = 2)
# Apply to all dates
df$gdp_smooth <- gdp_interp_fun(as.numeric(df$date))
# Prepare combined dataframe for plotting
gdp_plot_df <- df %>% filter(date < as.Date("2017-04-25")) %>% select(date, nok, gdp_smooth)
# Plot using dual_base_plot (base R)
dual_base_plot(
gdp_plot_df,
y1_col = "nok", y2_col = "gdp_smooth",
y1_label = "NOKJPY", y2_label = "GDP YoY %",
title = "NOK vs GDP (Interpolated)"
)
# Linear regression (OLS)) (OLS)
x0 <- df %>% select(usd, gbp, eur, brent)
y  <- df$nok
train_idx <- df$date < as.Date("2017-04-25")
ols_model <- lm(y[train_idx] ~ ., data = x0[train_idx, ])
print(summary(ols_model))
library(glmnet)
# Convertimos x0 y filtramos por fecha
fecha_corte <- as.Date('2017-04-25')
x0_filtrado <- as.matrix(subset(x0, index(x0) < fecha_corte))
# Oil Money NOK Strategy - R Translation
# Load required libraries
library(tidyverse)
library(lubridate)
library(glmnet)
# Load and prepare data
df <- read.csv("data/brent crude nokjpy.csv", check.names = FALSE)
colnames(df)[1] <- "date"
df$date <- as.Date(df$date, format = "%m/%d/%Y")
# Scatter plot NOK vs Brent
df %>%
filter(date < as.Date("2017-04-25")) %>%
ggplot(aes(x = brent, y = nok)) +
geom_point(color = "#5f0f4e", size = 0.8) +
labs(title = "NOK Brent Correlation", x = "Brent in JPY", y = "NOKJPY") +
theme_minimal()
# Dual-axis base plot function (mimics Python twin axes)
dual_base_plot <- function(data, y1_col, y2_col, y1_label, y2_label, title,
col1 = "#34262b", col2 = "#cb2800") {
# Set margins to allow right axis label
par(mar = c(5, 4, 4, 4) + 0.1)
# Plot first series
plot(data$date, data[[y1_col]], type = "l", col = col1,
xlab = "Date", ylab = y1_label, main = title)
# Overlay second series with no axes
par(new = TRUE)
plot(data$date, data[[y2_col]], type = "s", col = col2,
axes = FALSE, xlab = "", ylab = "")
axis(side = 4, col = col2, col.axis = col2)
mtext(y2_label, side = 4, line = 3, col = col2)
legend("bottomright", legend = c(y1_label, y2_label),
col = c(col1, col2), lty = 1, bty = "n")
}
# Use dual_base_plot for relationships
# NOK vs Interest Rate
dual_base_plot(
df %>% filter(date < as.Date("2017-04-25")),
y1_col = "nok", y2_col = "interest rate",
y1_label = "NOKJPY", y2_label = "Interest Rate",
title = "NOK vs Interest Rate"
)
# NOK vs Brent
dual_base_plot(
df %>% filter(date < as.Date("2017-04-25")),
y1_col = "nok", y2_col = "brent",
y1_label = "NOKJPY", y2_label = "Brent in JPY",
title = "NOK vs Brent"
)
# NOK vs GDP (quarterly) - smooth interpolation of GDP values
# Interpolate GDP to daily frequency
gdp_idx    <- which(!is.na(df$`gdp yoy`))
gdp_dates  <- df$date[gdp_idx]
gdp_values <- df$`gdp yoy`[gdp_idx]
# Create interpolation function
gdp_interp_fun <- approxfun(x = as.numeric(gdp_dates), y = gdp_values, method = "linear", rule = 2)
# Apply to all dates
df$gdp_smooth <- gdp_interp_fun(as.numeric(df$date))
# Prepare combined dataframe for plotting
gdp_plot_df <- df %>% filter(date < as.Date("2017-04-25")) %>% select(date, nok, gdp_smooth)
# Plot using dual_base_plot (base R)
dual_base_plot(
gdp_plot_df,
y1_col = "nok", y2_col = "gdp_smooth",
y1_label = "NOKJPY", y2_label = "GDP YoY %",
title = "NOK vs GDP (Interpolated)"
)
# Linear regression (OLS)) (OLS)
x0 <- df %>% select(usd, gbp, eur, brent)
y  <- df$nok
train_idx <- df$date < as.Date("2017-04-25")
ols_model <- lm(y[train_idx] ~ ., data = x0[train_idx, ])
print(summary(ols_model))
library(glmnet)
# Convertimos x0 y filtramos por fecha
fecha_corte <- as.Date('2017-04-25')
x0_filtrado <- as.matrix(subset(x0, index(x0) < fecha_corte))
